# Data

::: {.content-visible when-format="html"}
[PDF version](https://statistics.svenotto.com/section1_data.pdf)
:::

## Datasets

A **univariate dataset** is a sequence of observations $Y_1, \ldots, Y_n$.
These $n$ observations can be organized into the **data vector** $\boldsymbol Y$, represented as $\boldsymbol Y = (Y_1, \ldots, Y_n)'$.
For example, if you conduct a survey and ask five individuals about their hourly earnings, your data vector might look like
$$
  \boldsymbol Y = \begin{pmatrix} 18.22 \\ 23.85 \\ 10.00 \\ 6.39 \\ 7.42 \end{pmatrix}.
$$
Typically we have data on more than one variable, such as years of education and the gender.
Categorical variables are often encoded as **dummy variables**, which are binary variables. 
The female dummy variable is defined as 1 if the gender of the person is female and 0 otherwise.


```{r, echo=FALSE}
library(knitr)
mydata = data.frame(
 person = c(1, 2, 3, 4, 5),
 wage = c(18.22, 23.85, 10.00, 6.39, 7.42),
 education = c(16, 18, 16, 13, 14),
 female = c(1, 0, 1, 0, 0)
) 
kable(mydata, align = 'c')
```


A **$k$-variate dataset** (or multivariate dataset) is a collection of $n$ vectors $\boldsymbol X_1, \ldots, \boldsymbol X_n$ containing data on $k$ variables. The $i$-th vector $\boldsymbol X_i = (X_{i1}, \ldots, X_{ik})'$ contains the data on all $k$ variables for individual $i$. Thus, $X_{ij}$ represents the value for the $j$-th variable of individual $i$. 

The full $k$-variate dataset is structured in the $n \times k$ **data matrix** $\boldsymbol X$:
$$
  \boldsymbol X = \begin{pmatrix}
    \boldsymbol X_1' \\ \vdots \\ \boldsymbol X_n'
  \end{pmatrix} = \begin{pmatrix} X_{11} & \ldots & X_{1k} \\
  \vdots & \ddots & \vdots \\
  X_{n1} & \ldots & X_{nk} \end{pmatrix}
$$
The $i$-th row in $\boldsymbol X$ corresponds to the values from $\boldsymbol X_i$.
Since $\boldsymbol X_i$ is a column vector, we use the transpose notation $\boldsymbol X_i'$, which is a row vector.

The data matrix for our example is
$$
\boldsymbol X = \begin{pmatrix} 
  18.22 & 16 & 1 \\
  23.85 & 18 & 0 \\
  10.00 & 16 & 1 \\
  6.39 & 13 & 0 \\
  7.42 & 14 & 0
  \end{pmatrix}
$$
with data vectors
$$
\boldsymbol X_1 = \begin{pmatrix} 18.22 \\ 16 \\ 1 \end{pmatrix}, \
  \boldsymbol X_2 = \begin{pmatrix} 23.85 \\ 18 \\ 0 \end{pmatrix}, \ \ldots \ .
$$

Vector and matrix algebra provide a compact mathematical representation of multivariate data and an efficient framework for analyzing and implementing statistical methods. We will use matrix algebra frequently throughout this course. 

To refresh or enhance your knowledge of matrix algebra, please consult the following resources:

::: {.callout-tip appearance="simple"}

## Crash Course on Matrix Algebra: 

[matrix.svenotto.com](https://matrix.svenotto.com/)

Section 19.1 of the Stock and Watson textbook also provides a brief overview of matrix algebra concepts.
:::



## R programming language

The best way to learn statistical methods is to program and apply them yourself. 
Throughout this course, we will use the `R` programming language for implementing empirical methods and analyzing real-world datasets. 

If you are just starting with `R`, it is crucial to familiarize yourself with its basics. 
Here's an introductory tutorial, which contains a lot of valuable resources:


::: {.callout-tip appearance="simple"}

## Getting Started with R: 

[rintro.svenotto.com](https://rintro.svenotto.com/)
:::

For those new to R, I also recommend the interactive R package [SWIRL](https://swirlstats.com/), which offers an excellent way to learn directly within the R environment. 
Additionally, a highly recommended online book to learn R programming is [Hands-On Programming with R](https://rstudio-education.github.io/hopr/).

One of the best features of R is its extensive ecosystem of packages contributed by the statistical community.
You find R packages for almost any statistical method out there and many statisticians provide R packages to accompany their research.

One of the most frequently used packages in applied econometrics is the `AER` package ("Applied Econometrics with R"), which provides a comprehensive collection of inferential methods for linear models.
You can install the package with the command `install.packages("AER")` and you can load it with
```{r, message = F}
library(AER)
```
at the beginning of your code.
We will explore several additional packages in the course of the lecture.

## Datasets in R

R includes many built-in datasets and packages of datasets that can be loaded directly into your R environment.
For illustration, we consider the `CASchools` dataset available in the `AER` package. 
This dataset is used in the Stock and Watson textbook *[Introduction to Econometrics](https://elibrary.pearson.de/book/99.150005/9781292264523)* in Sections 4--8.
It contains information on various characteristics of schools in California, such as test scores, teacher salaries, and student demographics. The data were collected in 1998.

The dataset contains the following variables:

| Variable | Description |
|-----------|-------------|
| district | School district ID |
| school | School name |
| county | County name |
| grades | Grade span: K-6 or K-8 |
| students | Student count |
| teachers | Teacher count |
| calworks | % of CalWorks students |
| lunch | % receiving free lunch |
| computer | Number of computers |
| expenditure | Expenditure per student |
| income | District average income (thousands $) |
| english | % of English learners |
| read | Average reading score |
| math | Average math score |

\

To load this dataset into your R session, simply use:
```{r}
data(CASchools, package = "AER")
```

The Environment pane in RStudio's top-right corner displays all objects currently in your workspace, including the `CASchools` dataset. You can click on `CASchools` to open a table viewer and explore its contents.
To get a description of the dataset, use the `?CASchools` command.
The `head()` function displays its first few rows:
```{r}
head(CASchools)
```


The `CASchools` dataset is stored as a `data.frame`, R's most common data storage class for tabular data as in the data matrix $\boldsymbol X$. 
It organizes data in the form of a table, with variables as columns and observations as rows.

```{r}
class(CASchools)
```

To inspect the structure of your dataset, you can use `str()`:
```{r}
str(CASchools)
```

The dataset contains variables of different types:
`chr` for character/text data, `Factor` for categorical data, and `num` for numeric data.

The variable `students` contains the total number of students enrolled in a school. It is the fifth variable in the data set.
To access the variable as a vector, you can type `CASchools[,5]` (the fifth column in your data matrix), or `CASchools[,"students"]`, or simply `CASchool$students`.

If you want to select the variables `students` and `teachers`, you can type `CASchools[,c("students", "teachers")]`.
We can define our own dataframe `mydata` that contains a selection of variables:
```{r}
mydata = CASchools[,c("students", "teachers", "english", "income", "math", "read")]
head(mydata)
```

The pipe operator `|>` efficiently chains commands. It passes the output of one function as the input to another. For example, `mydata |> head()` gives the same output as `head(mydata)`.

A convenient alternative to select a subset of variables of your dataframe is the `select()` function from the `dplyr` package. Let's chain the `select()` and `head()` function:
```{r, message = F}
library(dplyr)
CASchools |> select(students, teachers, english, income, math, read) |> head()
```

Piping in R makes code more readable by allowing you to read operations from left to right in a natural order, rather than nesting functions inside each other from the inside out.

We can easily add new variables to our dataframe, for instance, the student-teacher ratio (the total number of students per teacher) and the average test score (average of the math and reading scores):
```{r}
# compute student-teacher ratio and append it to mydata
mydata$STR = mydata$students/mydata$teachers 
# compute test score and append it to mydata
mydata$score = (mydata$read+mydata$math)/2   
```


The variable `english` indicates the proportion of students whose first language is not English and who may need additional support.
We might be interested in the dummy variable `HiEL`, which indicates whether the proportion of English learners is above 10 percent or not:
```{r}
# append HiEL to mydata
mydata$HiEL = (mydata$english >= 10) |> as.numeric()
```

Note that `mydata$english >= 10` is a logical expression with either `TRUE` or `FALSE` values. The command `as.numeric()` creates a dummy variable by translating `TRUE` to `1` and `FALSE` to `0`.

Scatterplots provide further insights:

```{r, fig.height=4}
plot(score~STR, data = mydata)
```


```{r, fig.height=4}
par(mfrow = c(1,2))
plot(score~income, data = mydata)
plot(score~english, data = mydata)
```

The option `par(mfrow = c(1,2))` allows to display multiple plots side by side. Try what happens if you replace `c(1,2)` with `c(2,1)`.




## R-codes

[statistics-sec01.R](https://statistics.svenotto.com/statistics-sec01.R)